import React, { useState, useEffect, useRef } from 'react';
import { Button, Input, Sheet } from 'zmp-ui';
import axios from 'axios';
import './style.scss';

// Goong API ÈÖçÁΩÆ
const GOONG_API_KEY = '5uo0DOu7oFhOoqtxFhyZemwhmkI0XiFTiq66c0Nj';
const GOONG_BASE_URL = 'https://rsapi.goong.io';

// Ëß£ÊûêË∂äÂçóÂú∞ÂùÄÁªÑ‰ª∂
const parseVietnameseAddress = (addressComponents) => {
  const result = {
    province: '',
    district: '',
    ward: '',
    street: '',
    house_number: ''
  };

  addressComponents.forEach(component => {
    const types = component.types || [];

    if (types.includes('administrative_area_level_1')) {
      result.province = component.long_name;
    } else if (types.includes('administrative_area_level_2')) {
      result.district = component.long_name;
    } else if (types.includes('administrative_area_level_3') || types.includes('sublocality_level_1')) {
      result.ward = component.long_name;
    } else if (types.includes('route')) {
      result.street = component.long_name;
    } else if (types.includes('street_number')) {
      result.house_number = component.long_name;
    }
  });

  return result;
};

const GoongAddressPicker = ({ visible, onClose, onSelect, defaultAddress = {} }) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [suggestions, setSuggestions] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedAddress, setSelectedAddress] = useState(defaultAddress);
  const [showMap, setShowMap] = useState(false);
  const searchTimeout = useRef(null);

  /**
   * Áõ¥Êé•Ë∞ÉÁî® Goong API ÊêúÁ¥¢Âú∞ÂùÄÂª∫ËÆÆ
   */
  const searchAddresses = async (query) => {
    if (!query || query.length < 2) {
      setSuggestions([]);
      return;
    }

    setLoading(true);
    try {
      const response = await axios.get(`${GOONG_BASE_URL}/Place/AutoComplete`, {
        params: {
          api_key: GOONG_API_KEY,
          input: query,
          limit: 10,
          location: '10.762622,106.660172', // ËÉ°ÂøóÊòéÂ∏Ç‰∏≠ÂøÉÂùêÊ†á
          radius: 50000 // 50km ÂçäÂæÑ
        }
      });

      if (response.data && response.data.predictions) {
        setSuggestions(response.data.predictions);
      } else {
        setSuggestions([]);
      }
    } catch (error) {
      console.error('Âú∞ÂùÄÊêúÁ¥¢Â§±Ë¥•:', error);
      setSuggestions([]);
    } finally {
      setLoading(false);
    }
  };

  /**
   * Áõ¥Êé•Ë∞ÉÁî® Goong API Ëé∑ÂèñÂú∞ÁÇπËØ¶ÊÉÖ
   */
  const getPlaceDetail = async (placeId) => {
    setLoading(true);
    try {
      const response = await axios.get(`${GOONG_BASE_URL}/Place/Detail`, {
        params: {
          api_key: GOONG_API_KEY,
          place_id: placeId
        }
      });

      if (response.data && response.data.result) {
        const place = response.data.result;

        // Ëß£ÊûêË∂äÂçóÂú∞ÂùÄÁªÑ‰ª∂
        const addressComponents = place.address_components || [];
        const vietnameseAddress = parseVietnameseAddress(addressComponents);

        const addressData = {
          place_id: place.place_id,
          formatted_address: place.formatted_address,
          province: vietnameseAddress.province || '',
          district: vietnameseAddress.district || '',
          ward: vietnameseAddress.ward || '',
          street: vietnameseAddress.street || '',
          house_number: vietnameseAddress.house_number || '',
          latitude: place.geometry?.location?.lat || '',
          longitude: place.geometry?.location?.lng || ''
        };

        setSelectedAddress(addressData);
        return addressData;
      }
    } catch (error) {
      console.error('Ëé∑ÂèñÂú∞ÁÇπËØ¶ÊÉÖÂ§±Ë¥•:', error);
    } finally {
      setLoading(false);
    }
    return null;
  };

  /**
   * Áõ¥Êé•Ë∞ÉÁî® Goong API ÂèçÂêëÂú∞ÁêÜÁºñÁ†Å
   */
  const reverseGeocode = async (lat, lng) => {
    setLoading(true);
    try {
      const response = await axios.get(`${GOONG_BASE_URL}/Geocode`, {
        params: {
          api_key: GOONG_API_KEY,
          latlng: `${lat},${lng}`
        }
      });

      if (response.data && response.data.results && response.data.results.length > 0) {
        const address = response.data.results[0];
        const addressComponents = address.address_components || [];
        const vietnameseAddress = parseVietnameseAddress(addressComponents);

        const addressData = {
          formatted_address: address.formatted_address,
          province: vietnameseAddress.province || '',
          district: vietnameseAddress.district || '',
          ward: vietnameseAddress.ward || '',
          street: vietnameseAddress.street || '',
          house_number: vietnameseAddress.house_number || '',
          latitude: lat,
          longitude: lng
        };

        setSelectedAddress(addressData);
        return addressData;
      }
    } catch (error) {
      console.error('ÂèçÂêëÂú∞ÁêÜÁºñÁ†ÅÂ§±Ë¥•:', error);
    } finally {
      setLoading(false);
    }
    return null;
  };

  /**
   * ÊêúÁ¥¢ËæìÂÖ•Â§ÑÁêÜ
   */
  const handleSearchInput = (value) => {
    setSearchQuery(value);
    
    // Èò≤ÊäñÊêúÁ¥¢
    if (searchTimeout.current) {
      clearTimeout(searchTimeout.current);
    }
    
    searchTimeout.current = setTimeout(() => {
      searchAddresses(value);
    }, 300);
  };

  /**
   * ÈÄâÊã©Âú∞ÂùÄÂª∫ËÆÆ
   */
  const handleSuggestionSelect = async (suggestion) => {
    const addressData = await getPlaceDetail(suggestion.place_id);
    if (addressData) {
      setSearchQuery(addressData.formatted_address);
      setSuggestions([]);

      // Â¶ÇÊûúÊ≤°ÊúâËé∑ÂèñÂà∞ÂÆåÊï¥ÁöÑÁúÅÂ∏ÇÂå∫‰ø°ÊÅØÔºåÂ∞ùËØï‰ªéÊ†ºÂºèÂåñÂú∞ÂùÄ‰∏≠Ëß£Êûê
      if (!addressData.province || !addressData.district) {
        const fallbackAddress = parseAddressFromFormatted(addressData.formatted_address);
        const mergedAddress = {
          ...addressData,
          province: addressData.province || fallbackAddress.province,
          district: addressData.district || fallbackAddress.district,
          ward: addressData.ward || fallbackAddress.ward
        };
        setSelectedAddress(mergedAddress);
      }
    }
  };

  /**
   * ‰ªéÊ†ºÂºèÂåñÂú∞ÂùÄ‰∏≠Ëß£ÊûêÁúÅÂ∏ÇÂå∫‰ø°ÊÅØÔºàÂ§áÁî®ÊñπÊ°àÔºâ
   */
  const parseAddressFromFormatted = (formattedAddress) => {
    const result = { province: '', district: '', ward: '' };

    if (formattedAddress) {
      // Ë∂äÂçóÂú∞ÂùÄÈÄöÂ∏∏ÂåÖÂê´Ëøô‰∫õÂÖ≥ÈîÆËØç
      if (formattedAddress.includes('H·ªì Ch√≠ Minh') || formattedAddress.includes('Ho Chi Minh')) {
        result.province = 'Th√†nh ph·ªë H·ªì Ch√≠ Minh';
      } else if (formattedAddress.includes('H√† N·ªôi') || formattedAddress.includes('Hanoi')) {
        result.province = 'H√† N·ªôi';
      } else if (formattedAddress.includes('ƒê√† N·∫µng') || formattedAddress.includes('Da Nang')) {
        result.province = 'ƒê√† N·∫µng';
      }

      // ÊèêÂèñÂå∫‰ø°ÊÅØ
      const districtMatch = formattedAddress.match(/Qu·∫≠n\s+(\d+|[A-Za-z\s]+)/i);
      if (districtMatch) {
        result.district = `Qu·∫≠n ${districtMatch[1]}`;
      }

      // ÊèêÂèñÂùä‰ø°ÊÅØ
      const wardMatch = formattedAddress.match(/Ph∆∞·ªùng\s+([^,]+)/i);
      if (wardMatch) {
        result.ward = `Ph∆∞·ªùng ${wardMatch[1]}`;
      }
    }

    return result;
  };

  /**
   * Á°ÆËÆ§ÈÄâÊã©
   */
  const handleConfirm = () => {
    if (selectedAddress.formatted_address) {
      // Ê†ºÂºèÂåñ‰∏∫ÊóßÁ≥ªÁªüÂÖºÂÆπÁöÑÊ†ºÂºè
      const formattedData = {
        selectedProvinceName: selectedAddress.province || 'Th√†nh ph·ªë H·ªì Ch√≠ Minh',
        selectedCityName: selectedAddress.district || 'Qu·∫≠n 1',
        selectedWardName: selectedAddress.ward || '',
        street: selectedAddress.street || '',
        house_number: selectedAddress.house_number || '',
        formatted_address: selectedAddress.formatted_address,
        latitude: selectedAddress.latitude,
        longitude: selectedAddress.longitude
      };

      onSelect && onSelect(formattedData);
      onClose && onClose();
    } else {
      alert('ËØ∑ÈÄâÊã©‰∏Ä‰∏™Âú∞ÂùÄ');
    }
  };

  /**
   * Ëé∑ÂèñÂΩìÂâç‰ΩçÁΩÆ
   */
  const getCurrentLocation = () => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          reverseGeocode(latitude, longitude);
        },
        (error) => {
          console.error('Ëé∑Âèñ‰ΩçÁΩÆÂ§±Ë¥•:', error);
          alert('Êó†Ê≥ïËé∑ÂèñÂΩìÂâç‰ΩçÁΩÆÔºåËØ∑ÊâãÂä®ÊêúÁ¥¢Âú∞ÂùÄ');
        }
      );
    } else {
      alert('ÊµèËßàÂô®‰∏çÊîØÊåÅÂú∞ÁêÜÂÆö‰Ωç');
    }
  };

  // Ê∏ÖÁêÜÂÆöÊó∂Âô®
  useEffect(() => {
    return () => {
      if (searchTimeout.current) {
        clearTimeout(searchTimeout.current);
      }
    };
  }, []);

  return (
    <Sheet 
      visible={visible} 
      onClose={onClose}
      title="ÈÄâÊã©Âú∞ÂùÄ"
      height="80vh"
    >
      <div className="goong-address-picker">
        {/* ÊêúÁ¥¢Ê†è */}
        <div className="search-section">
          <div className="search-bar">
            <Input
              placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ ƒë·ªÉ t√¨m ki·∫øm..."
              value={searchQuery}
              onInput={(e) => handleSearchInput(e.target.value)}
              suffix={loading && <span className="loading-icon">‚è≥</span>}
            />
          </div>
          
          <div className="action-buttons">
            <Button 
              size="small" 
              type="secondary"
              onClick={getCurrentLocation}
            >
              üìç V·ªã tr√≠ hi·ªán t·∫°i
            </Button>
          </div>
        </div>

        {/* Âú∞ÂùÄÂª∫ËÆÆÂàóË°® */}
        {suggestions.length > 0 && (
          <div className="suggestions-list">
            {suggestions.map((suggestion, index) => (
              <div 
                key={index}
                className="suggestion-item"
                onClick={() => handleSuggestionSelect(suggestion)}
              >
                <div className="main-text">
                  {suggestion.structured_formatting?.main_text || suggestion.description}
                </div>
                <div className="secondary-text">
                  {suggestion.structured_formatting?.secondary_text || ''}
                </div>
              </div>
            ))}
          </div>
        )}

        {/* ÈÄâ‰∏≠ÁöÑÂú∞ÂùÄ‰ø°ÊÅØ */}
        {selectedAddress.formatted_address && (
          <div className="selected-address">
            <h3>ƒê·ªãa ch·ªâ ƒë√£ ch·ªçn:</h3>
            <div className="address-info">
              <p><strong>ƒê·ªãa ch·ªâ ƒë·∫ßy ƒë·ªß:</strong> {selectedAddress.formatted_address}</p>
              {selectedAddress.province && (
                <p><strong>T·ªânh/Th√†nh ph·ªë:</strong> {selectedAddress.province}</p>
              )}
              {selectedAddress.district && (
                <p><strong>Qu·∫≠n/Huy·ªán:</strong> {selectedAddress.district}</p>
              )}
              {selectedAddress.ward && (
                <p><strong>Ph∆∞·ªùng/X√£:</strong> {selectedAddress.ward}</p>
              )}
              {selectedAddress.street && (
                <p><strong>ƒê∆∞·ªùng:</strong> {selectedAddress.street}</p>
              )}
              {selectedAddress.house_number && (
                <p><strong>S·ªë nh√†:</strong> {selectedAddress.house_number}</p>
              )}
            </div>
          </div>
        )}

        {/* Â∫ïÈÉ®ÊåâÈíÆ */}
        <div className="bottom-actions">
          <Button 
            type="secondary" 
            onClick={onClose}
            style={{ marginRight: '10px' }}
          >
            H·ªßy
          </Button>
          <Button
            type="primary"
            onClick={handleConfirm}
            disabled={!selectedAddress.formatted_address}
          >
            X√°c nh·∫≠n
          </Button>
        </div>
      </div>
    </Sheet>
  );
};

export default GoongAddressPicker;